import re
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import date, datetime
from app.utils import formatters
import app.keyboard as kb
import app.database.requests as rq
import app.states as st
from aiogram.types import BufferedInputFile

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_teacher(message.from_user.id)
    await message.answer("–í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.main)

@router.callback_query(F.data == 'create_group_students')
async def create_group_students(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É')
    await state.set_state(st.CreateGroup.name)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')


@router.message(st.CreateGroup.name)
async def create_name_group(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    data = await state.get_data()
    teacher = await rq.get_teacher(message.from_user.id)
    await rq.create_group(data['name'], teacher.id)
    await message.answer(f"–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–Ω–∞ {data["name"]}",
                         reply_markup= kb.main)


@router.callback_query(F.data == 'select_group_students')
async def select_group_students(callback: CallbackQuery):
    await callback.answer('–®–∞–º–∞–Ω–∏–º —Å –≥—Ä—É–ø–ø–æ–π')
    teacher = await rq.get_teacher(callback.from_user.id)
    await callback.message.edit_text('–¢—É—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≥—Ä—É–ø–ø–æ–π', 
                                     reply_markup= await kb.groups(teacher.id))
    
@router.callback_query(F.data.startswith('group_'))
async def get_group(callback: CallbackQuery):
    parts = callback.data.split('_')
    group_id = int(parts[1])
    group_name = ' '.join(parts[2:])
    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name} (ID: {group_id})",
        reply_markup=kb.select_group(group_id)
    )
    await callback.answer()

@router.callback_query(F.data == 'delete_group_students')
async def delete_group_students(callback: CallbackQuery):
    teacher = await rq.get_teacher(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
        reply_markup=await kb.delete_groups(teacher.id)
    )

@router.callback_query(F.data.startswith('confirm_delete_'))
async def confirm_delete(callback: CallbackQuery):
    group_id = int(callback.data.split('_')[-1])
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É?",
        reply_markup=kb.confirm_delete_keyboard(group_id)
    )

@router.callback_query(F.data.startswith('final_delete_'))
async def final_delete(callback: CallbackQuery):
    group_id = int(callback.data.split('_')[-1])
    await rq.delete_group(group_id)
    await callback.message.edit_text(
        "–ì—Ä—É–ø–ø–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=kb.main
    )
    await callback.answer()

@router.callback_query(F.data == 'to_main')
async def cmd_main(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb.main)

@router.callback_query(F.data.startswith('add_students_'))
async def add_students_of_group(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split('_')[2])
    await state.update_data(group_id=group_id)
    await state.set_state(st.CreateStudents.students)
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n'
        '‚Ä¢ –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª: "–ò–≤–∞–Ω, –ú–∞—Ä–∏—è, –ü–µ—Ç—Ä"\n'
        '‚Ä¢ –ò–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n'
        '–ò–≤–∞–Ω\n'
        '–ú–∞—Ä–∏—è\n'
        '–ü–µ—Ç—Ä'
    )

@router.message(st.CreateStudents.students)
async def create_students(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data['group_id']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–≤–æ–¥–∞
    students = [name.strip() for name in re.split(r', |\n', message.text) if name.strip()]
    
    if not students:
        return await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    try:
        group = await rq.get_group_by_id(group_id)
        if not group:
            return await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            
        await rq.add_students(students, group_id)
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É {group.name}:\n" 
            + "\n".join(f"‚Ä¢ {name}" for name in students),
            reply_markup=kb.main
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith('mark_attendance_'))
async def start_marking(callback: CallbackQuery):
    group_id = int(callback.data.split('_')[2])
    today = date.today()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    await rq.create_attendance_records(group_id, today)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    group = await rq.get_group_by_id(group_id)
    
    await callback.message.edit_text(
        f"–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ ¬∑ {group.name}",
        reply_markup=await kb.attendance_list(
            group_id=group_id,
            group_name=group.name,
            lesson_date=today
        )
    )
    

@router.callback_query(F.data.startswith("set_status_"))
async def set_status(callback: CallbackQuery):
    parts = callback.data.split('_')
    student_id = int(parts[2])
    group_id = int(parts[3])
    lesson_date = datetime.strptime(parts[4], "%Y-%m-%d").date()
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=kb.attendance_buttons(student_id, group_id, lesson_date)
    )

@router.callback_query(F.data.startswith("attendance_"))
async def save_attendance(callback: CallbackQuery):
    parts = callback.data.split('_')
    student_id = int(parts[1])
    status = parts[2]
    group_id = int(parts[3])
    lesson_date = date.fromisoformat(parts[4])  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    group = await rq.get_group_by_id(group_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    await rq.update_attendance(student_id, lesson_date, status)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=await kb.attendance_list(
            group_id=group_id,
            group_name=group.name,
            lesson_date=lesson_date
        )
    )
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data.startswith('student_'))
async def show_student_details(callback: CallbackQuery):
    student_id = int(callback.data.split('_')[1])
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞
    await callback.answer(f"–°—Ç—É–¥–µ–Ω—Ç ID: {student_id}")

@router.callback_query(F.data.startswith('show_report_'))
async def show_attendance_report(callback: CallbackQuery):
    group_id = int(callback.data.split('_')[2])
    report_data = await rq.get_attendance_report(group_id)
    
    await callback.message.answer(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {report_data['current_page']}:\n{formatters.format_attendance_table(report_data)}",
        parse_mode="MarkdownV2",
        reply_markup=kb.dates_pagination(
            group_id=group_id,
            current_page=report_data['current_page'],
            total_pages=report_data['total_pages']
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith('dates_page_'))
async def handle_dates_pagination(callback: CallbackQuery):
    _,_, group_id, page = callback.data.split('_')
    report_data = await rq.get_attendance_report(int(group_id), int(page))
    
    if int(page) > report_data['total_pages']:
        await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è")
        return
    
    await callback.message.edit_text(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {report_data['current_page']}:\n{formatters.format_attendance_table(report_data)}",
        parse_mode="MarkdownV2",
        reply_markup=kb.dates_pagination(
            group_id=int(group_id),
            current_page=int(page),
            total_pages=report_data['total_pages']
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith('refresh_report_'))
async def refresh_report(callback: CallbackQuery):
    group_id = int(callback.data.split('_')[2])
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await show_attendance_report(callback)

@router.callback_query(F.data.startswith('export_excel_'))
async def export_excel_handler(callback: CallbackQuery):
    try:
        group_id = int(callback.data.split('_')[2])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        teacher = await rq.get_teacher(callback.from_user.id)
        if not await rq.check_group_owner(group_id, teacher.id):
            return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞
        filename, excel_buffer = await rq.export_to_excel(group_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        await callback.message.answer_document(
            document=BufferedInputFile(
                excel_buffer.getvalue(),
                filename=filename
            ),
            caption=f"üìä –û—Ç—á–µ—Ç –≥—Ä—É–ø–ø—ã {filename.split('_')[0]}"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")